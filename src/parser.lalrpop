use crate::ast::*;

grammar;

// declaration 
// declaration_specifier    init_declarator_list    ;
// type_specifier           init_declarator
// int                      declarator
//                          direct_declarator
//                          x

// declaration
// 	: declaration_specifiers ';'
// 	| declaration_specifiers init_declarator_list ';'
// 	;
pub Declaration: Box<Decl> = {
    <dspecs:DeclarationSpecifiers> ";" => Box::new(Decl::Decl(*dspecs)),
    <dspecs:DeclarationSpecifiers> <idecllist: InitDeclaratorList> ";" => Box::new(Decl::DeclList(*dspecs, idecllist)),
};

// declaration_specifiers
// 	: storage_class_specifier
// 	| storage_class_specifier declaration_specifiers
// 	| type_specifier
// 	| type_specifier declaration_specifiers
//  ;
pub DeclarationSpecifiers: Box<DeclSpecs> = {
    <tspecs:TypeSpecifier> => Box::new(DeclSpecs::Type(tspecs)),
};

// init_declarator_list
// 	: init_declarator
// 	| init_declarator_list ',' init_declarator
// 	;
pub InitDeclaratorList = List<InitDeclarator>;

// init_declarator
// 	: declarator
// 	| declarator '=' initializer
// 	;
pub InitDeclarator: Box<InitDecl> = {
    <decl: Declarator> => Box::new(InitDecl::Decl(*decl)),
    // Declarator "=" Initializer,
};

// declarator
// 	: pointer direct_declarator
// 	| direct_declarator
// 	;
pub Declarator: Box<Declarator> = {
    <ddecl: DirectDeclarator> => Box::new(Declarator::ValDecl(*ddecl)),
};

// direct_declarator
// 	: IDENTIFIER
// 	| '(' declarator ')'
// 	| direct_declarator '[' constant_expression ']'
// 	| direct_declarator '[' ']'
// 	| direct_declarator '(' parameter_type_list ')'
// 	| direct_declarator '(' identifier_list ')'
// 	| direct_declarator '(' ')'
// 	;
pub DirectDeclarator: Box<DirDeclarator> = {
    <s:Identifier> => Box::new(DirDeclarator::Id(s)),
};

pub TypeSpecifier: TypeSpec = {
    "int" => TypeSpec::Int,
};

List<T>: Vec<T> = { // (1)
    <el:T> <mut v:("," <T>)*> => {
        if v.is_empty() {
            vec![el]
        } else {
            let mut list = vec![el];
            list.append(&mut v);
            list
        }
    }
};

Identifier: String = {
    <s:r"[_a-zA-Z][_a-zA-Z0-9]*"> => s.to_string(),
};