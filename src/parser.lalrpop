// use std::str::FromStr;
use crate::ast::*;

grammar;

// declaration 
// declaration_specifier    init_declarator_list    ;
// type_specifier           init_declarator
// int                      declarator
//                          direct_declarator
//                          x

pub Declaration: Box<Decl> = {
    <specs:DeclarationSpecifiers> ";" => Box::new(Decl::Decl(specs)),
};

// declaration_specifiers
// 	: storage_class_specifier
// 	| storage_class_specifier declaration_specifiers
// 	| type_specifier
// 	| type_specifier declaration_specifiers
//  ;
pub DeclarationSpecifiers: Box<DeclSpecs> = {
    <tspecs:TypeSpecifier> => Box::new(DeclSpecs::Type(tspecs)),
};

// init_declarator
// 	: declarator
// 	| declarator '=' initializer
// 	;
pub InitDeclarator: Box<InitDecl> = {
    Declarator, // just declaration
    // Declarator "=" Initializer, // assignment
};

// init_declarator_list
// 	: init_declarator
// 	| init_declarator_list ',' init_declarator
// 	;
pub InitDeclaratorList: Box<InitDeclList> = {
    InitDeclarator,
};

pub Declarator: Box<Declarator> = {
    DirectDeclarator,
};

pub DirectDeclarator: Box<DirDeclarator> = {
    <s:StrLiteral> => Box::new(DirDeclarator::Id(s)),
};

pub TypeSpecifier: TypeSpec = {
    "int" => TypeSpec::Int,
};

StrLiteral: String = {
    <s:r"'[^']*'"> => s.trim_matches('\'').to_string(),
};